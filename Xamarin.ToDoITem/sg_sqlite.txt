NuGet sqlite-net-pcl
-----------------------------------------------------------------------------------

1 - ISqliteManage.cs

namespace Xamarin.ToDoITem.SQLite
{
    public interface ISqliteManage
    {
        string DatabaseFolder();
    }
}
-----------------------------------------------------------------------------------

2 - ItemController.cs

using System.Collections.Generic;
using System.Threading.Tasks;
using SQLite;

namespace Xamarin.ToDoITem.SQLite
{
    public class ItemController
    {
        public readonly SQLiteAsyncConnection database;

        public ItemController()
        {
            database = App.ItemDatabase.Database;
            database.GetConnection();
        }

        public Task<List<Task>> GetTasks()
        {
            return database.Table<Task>().ToListAsync();
        }

        public Task<int> InsertTask(Task task)
        {
            return database.InsertAsync(task);
        }

        public Task<int> DeleteTask(Task task)
        {
            return database.DeleteAsync(task);
        }
    }
}
-----------------------------------------------------------------------------------

3 - ItemDatabase.cs

using SQLite;

namespace Xamarin.ToDoITem.SQLite
{
    public class ItemDatabase
    {
        readonly SQLiteAsyncConnection database;

        public ItemDatabase(string dbPath)
        {
            database = new SQLiteAsyncConnection(dbPath);
            database.CreateTableAsync<Task>().Wait();
        }

        public SQLiteAsyncConnection Database
        {
            get { return database; }
        }
    }
}
-----------------------------------------------------------------------------------

4 - Task.cs

[PrimaryKey]
[AutoIncrement]
public int Id { get; set; }
-----------------------------------------------------------------------------------

5 - App.xaml.cs

public static ItemDatabase ItemDatabase { get; set; }
public static ISqliteManage SqliteManage { get; set; }
public static ItemController ItemController { get; set; }

ItemDatabase = new ItemDatabase(SqliteManage.DatabaseFolder());
ItemController = new ItemController();

public static void Init(ISqliteManage sqliteManage)
{
	SqliteManage = sqliteManage;
}
-----------------------------------------------------------------------------------

6 - AddItem.cs

protected override async void OnAppearing()
{
	var list = await App.ItemController.GetTasks();
	myList = new ObservableCollection<Task>(list);
	ItemsListView.ItemsSource = myList;
}

public int GenerateID()
{
	var num = new Random().Next(100);
	while (myList.Any(x => x.Id == num))
		num = new Random().Next(100);

	return num;
}

await App.ItemController.InsertTask(task);

private async void ItemsListView_OnItemTapped(object sender, ItemTappedEventArgs e)
{
	var task = (Task) ItemsListView.SelectedItem;
	ItemsListView.SelectedItem = null;

	if (await DisplayAlert(null, "Delete selected task?", "Yes", "No"))
	{
		myList.Remove(task);
		await App.ItemController.DeleteTask(task);
		ItemsListView.ItemsSource = myList;
	}
}
-----------------------------------------------------------------------------------

Android

7 - MainActivity.cs

,ISqliteManage

SQLitePCL.Batteries_V2.Init();

App.Init(this);

public string DatabaseFolder()
{
	return Path.Combine(System.Environment.GetFolderPath(System.Environment.SpecialFolder.LocalApplicationData), "ToDoItemSQLite.db3");
}
-----------------------------------------------------------------------------------

UWP

8 - App.xaml.cs

,ISqliteManage

ToDoITem.App.Init(this);

public string DatabaseFolder()
{
	return Path.Combine(System.Environment.GetFolderPath(System.Environment.SpecialFolder.LocalApplicationData), "ToDoItemSQLite.db3");
}